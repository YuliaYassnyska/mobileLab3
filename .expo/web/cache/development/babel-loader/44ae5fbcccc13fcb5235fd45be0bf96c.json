{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport formatNumber from \"./utils/formatNumber\";\nexport default React.forwardRef(function (props, ref) {\n  var value = props.value,\n      onChangeText = props.onChangeText,\n      onChangeValue = props.onChangeValue,\n      separator = props.separator,\n      delimiter = props.delimiter,\n      _props$unit = props.unit,\n      unit = _props$unit === void 0 ? '' : _props$unit,\n      _props$precision = props.precision,\n      precision = _props$precision === void 0 ? 2 : _props$precision,\n      maxValue = props.maxValue,\n      minValue = props.minValue,\n      ignoreNegative = props.ignoreNegative,\n      rest = _objectWithoutProperties(props, [\"value\", \"onChangeText\", \"onChangeValue\", \"separator\", \"delimiter\", \"unit\", \"precision\", \"maxValue\", \"minValue\", \"ignoreNegative\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      startNegative = _React$useState2[0],\n      setStartNegative = _React$useState2[1];\n\n  var formattedValue = React.useMemo(function () {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator: separator,\n        unit: unit,\n        precision: precision,\n        delimiter: delimiter,\n        ignoreNegative: !!ignoreNegative\n      });\n    } else {\n      return '';\n    }\n  }, [delimiter, ignoreNegative, precision, separator, unit, value]);\n  React.useEffect(function () {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]);\n  var handleChangeText = React.useCallback(function (text) {\n    var textWithoutUnit = text.replace(unit, '');\n\n    if (/^(-|-0)$/.test(textWithoutUnit) && !ignoreNegative) {\n      setStartNegative(true);\n      onChangeText && onChangeText(unit + '-');\n      return;\n    } else {\n      setStartNegative(false);\n    }\n\n    var negative = textWithoutUnit.charAt(0) === '-';\n    var textNumericValue = text.replace(/\\D+/g, '');\n    var numberValue = Number(textNumericValue) * (negative ? -1 : 1);\n    var zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n    var newValue;\n\n    if (!textNumericValue || !numberValue && zerosOnValue === precision) {\n      newValue = null;\n    } else {\n      newValue = numberValue / Math.pow(10, precision);\n    }\n\n    if (newValue && maxValue && newValue > maxValue) {\n      return;\n    } else if (newValue && minValue && newValue < minValue) {\n      return;\n    }\n\n    onChangeValue && onChangeValue(newValue);\n  }, [unit, ignoreNegative, precision, maxValue, minValue, onChangeValue, onChangeText]);\n  return React.createElement(TextInput, _extends({\n    value: startNegative ? unit + '-' : formattedValue,\n    onChangeText: handleChangeText,\n    keyboardType: \"numeric\"\n  }, rest, {\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["CurrencyInput.tsx"],"names":["unit","precision","rest","React","formattedValue","value","formatNumber","separator","delimiter","ignoreNegative","onChangeText","handleChangeText","text","textWithoutUnit","setStartNegative","negative","textNumericValue","numberValue","Number","zerosOnValue","newValue","onChangeValue","startNegative","ref"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nimport formatNumber from './utils/formatNumber';\nimport type { CurrencyInputProps } from './props';\n\nexport default React.forwardRef<TextInput, CurrencyInputProps>((props, ref) => {\n  const {\n    value,\n    onChangeText,\n    onChangeValue,\n    separator,\n    delimiter,\n    unit = '',\n    precision = 2,\n    maxValue,\n    minValue,\n    ignoreNegative,\n    ...rest\n  } = props;\n\n  const [startNegative, setStartNegative] = React.useState(false);\n\n  const formattedValue = React.useMemo(() => {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator,\n        unit,\n        precision,\n        delimiter,\n        ignoreNegative: !!ignoreNegative,\n      });\n    } else {\n      return '';\n    }\n  }, [delimiter, ignoreNegative, precision, separator, unit, value]);\n\n  React.useEffect(() => {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      const textWithoutUnit = text.replace(unit, '');\n\n      // Allow starting with a minus sign\n      if (/^(-|-0)$/.test(textWithoutUnit) && !ignoreNegative) {\n        setStartNegative(true);\n        onChangeText && onChangeText(unit + '-');\n        return;\n      } else {\n        setStartNegative(false);\n      }\n\n      const negative = textWithoutUnit.charAt(0) === '-';\n\n      const textNumericValue = text.replace(/\\D+/g, '');\n\n      const numberValue = Number(textNumericValue) * (negative ? -1 : 1);\n\n      const zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n\n      let newValue: number | null;\n\n      if (!textNumericValue || (!numberValue && zerosOnValue === precision)) {\n        // Allow to clean the value instead of beign 0\n        newValue = null;\n      } else {\n        newValue = numberValue / 10 ** precision;\n      }\n\n      if (newValue && maxValue && newValue > maxValue) {\n        return;\n      } else if (newValue && minValue && newValue < minValue) {\n        return;\n      }\n\n      onChangeValue && onChangeValue(newValue);\n    },\n    [\n      unit,\n      ignoreNegative,\n      precision,\n      maxValue,\n      minValue,\n      onChangeValue,\n      onChangeText,\n    ]\n  );\n\n  return (\n    <TextInput\n      value={startNegative ? unit + '-' : formattedValue}\n      onChangeText={handleChangeText}\n      keyboardType=\"numeric\"\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}