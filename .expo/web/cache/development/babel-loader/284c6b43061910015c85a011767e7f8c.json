{"ast":null,"code":"export default (function (input, options) {\n  var _ref = options || {},\n      precision = _ref.precision,\n      _ref$separator = _ref.separator,\n      separator = _ref$separator === void 0 ? ',' : _ref$separator,\n      _ref$delimiter = _ref.delimiter,\n      delimiter = _ref$delimiter === void 0 ? '.' : _ref$delimiter,\n      _ref$unit = _ref.unit,\n      unit = _ref$unit === void 0 ? '' : _ref$unit,\n      ignoreNegative = _ref.ignoreNegative;\n\n  var negative = ignoreNegative ? false : input < 0;\n  var sign = negative ? '-' : '';\n  var string = Math.abs(input).toFixed(precision);\n  var parts = string.split('.');\n  var buffer = [];\n  var number = parts[0];\n\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n\n  var formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n  var decimals = parts[1];\n\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n\n  formattedNumber = \"\".concat(unit).concat(sign).concat(formattedNumber);\n  return formattedNumber;\n});","map":{"version":3,"sources":["formatNumber.ts"],"names":["separator","delimiter","unit","ignoreNegative","options","negative","input","sign","string","Math","parts","buffer","number","formattedNumber","decimals"],"mappings":"AAEA,gBAAe,UAAA,KAAA,EAAA,OAAA,EAAkD;AAAA,aAO3DI,OAAO,IANX,EAD+D;AAAA,MACzD,SADyD,QACzD,SADyD;AAAA,4BAG7DJ,SAH6D;AAAA,MAG7DA,SAH6D,+BACzD,GADyD;AAAA,4BAI7DC,SAJ6D;AAAA,MAI7DA,SAJ6D,+BACzD,GADyD;AAAA,uBAK7DC,IAL6D;AAAA,MAK7DA,IAL6D,0BACzD,EADyD;AAAA,MAM7DC,cAN6D,QAM7DA,cAN6D;;AAS/D,MAAME,QAAQ,GAAGF,cAAc,GAAA,KAAA,GAAWG,KAAK,GAA/C,CAAA;AACA,MAAMC,IAAI,GAAGF,QAAQ,GAAA,GAAA,GAArB,EAAA;AAEA,MAAMG,MAAM,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAAf,SAAeA,CAAf;AAEA,MAAMC,KAAK,GAAGF,MAAM,CAANA,KAAAA,CAAd,GAAcA,CAAd;AACA,MAAMG,MAAM,GAAZ,EAAA;AAEA,MAAIC,MAAM,GAAGF,KAAK,CAAlB,CAAkB,CAAlB;;AACA,SAAOE,MAAM,CAANA,MAAAA,GAAP,CAAA,EAA0B;AACxBD,IAAAA,MAAM,CAANA,OAAAA,CAAeC,MAAM,CAANA,MAAAA,CAAcH,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYG,MAAM,CAANA,MAAAA,GAA1BA,CAAcH,CAAdG,EAAfD,CAAeC,CAAfD;AACAC,IAAAA,MAAM,GAAGA,MAAM,CAANA,MAAAA,CAAAA,CAAAA,EAAiBA,MAAM,CAANA,MAAAA,GAA1BA,CAASA,CAATA;AACD;;AAED,MAAIC,eAAe,GAAnB,EAAA;AACAA,EAAAA,eAAe,GAAGF,MAAM,CAANA,IAAAA,CAAlBE,SAAkBF,CAAlBE;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAAtB,CAAsB,CAAtB;;AACA,MAAI,CAAC,CAAD,SAAA,IAAJ,QAAA,EAA6B;AAC3BG,IAAAA,eAAe,IAAIb,SAAS,GAA5Ba,QAAAA;AACD;;AAEDA,EAAAA,eAAe,GAAA,GAAA,MAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAA,EAAA,MAAA,CAAfA,eAAe,CAAfA;AAEA,SAAA,eAAA;AAjCF,CAAA","sourcesContent":["import type { FormatNumberOptions } from '../props';\n\nexport default (input: number, options?: FormatNumberOptions) => {\n  const {\n    precision,\n    separator = ',',\n    delimiter = '.',\n    unit = '',\n    ignoreNegative,\n  } = options || {};\n\n  const negative = ignoreNegative ? false : input < 0;\n  const sign = negative ? '-' : '';\n\n  const string = Math.abs(input).toFixed(precision);\n\n  const parts = string.split('.');\n  const buffer = [];\n\n  let number = parts[0];\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n\n  let formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n\n  const decimals = parts[1];\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n\n  formattedNumber = `${unit}${sign}${formattedNumber}`;\n\n  return formattedNumber;\n};\n"]},"metadata":{},"sourceType":"module"}