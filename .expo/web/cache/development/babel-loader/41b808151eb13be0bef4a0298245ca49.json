{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, { useState } from 'react'\r\n// import { Text, View, StyleSheet, TextInput, Loading } from 'react-native'\r\n// import firebase from 'firebase/app'\r\n// import Button from '@material-ui/core/Button';\r\n// // import { TextField } from '@material-ui/core';\r\n// // import axios from 'axios';\r\n// import Snackbar from '@material-ui/core/Snackbar';\r\n// import NetInfo from \"@react-native-community/netinfo\";\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n// const SignIn = ({ navigation, newJWT }, props) => {\r\n//   const [data, setData] = useState({\r\n//     email: '',\r\n//     password: '',\r\n//     isValidEmail: true,\r\n//     isValidPassword: true,\r\n//     error: '',\r\n//     snackbar: false\r\n//     // password_confirmation: '',\r\n//     // loading: false\r\n//   })\r\n\r\n//   const { point } = props\r\n\r\n\r\n\r\n//   const onButtonPress = () => {\r\n//     const { email, password } = data\r\n//     firebase\r\n//       .auth()\r\n//       .signInWithEmailAndPassword(email, password)\r\n//       .then(() => { navigation.navigate(\"Sensors\") })\r\n//       .catch(onLoginFail)\r\n//   }\r\n\r\n//   const onLoginFail = () => {\r\n//     setData({ error: 'Authentication Failed' })\r\n//   }\r\n\r\n//   const validate = (text) => {\r\n//     let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n//     if (reg.test(text) === true) {\r\n//       setData({ ...data, email: text, isValidEmail: true })\r\n//     } else {\r\n//       setData({ ...data, email: text, isValidEmail: false })\r\n//     }\r\n//   }\r\n\r\n//   // const loginUser = () => {\r\n//   //   const { email, password, password_confirmation } = data;\r\n\r\n//   //   setData({ error: '', loading: true });\r\n\r\n//   //   // NOTE Post to HTTPS only in production\r\n//   //   axios.post(\"http://localhost:4000/api/v1/sign_in\",{\r\n//   //       email: email,\r\n//   //       password: password\r\n//   //   })\r\n//   //   .then((response) => {\r\n//   //     deviceStorage.saveKey(\"id_token\", response.data.jwt);\r\n//   //     this.props.newJWT(response.data.jwt);\r\n//   //   })\r\n//   //   .catch((error) => {\r\n//   //     console.log(error);\r\n//   //   });\r\n//   // }\r\n\r\n//   const handlePasswordChange = (val) => {\r\n//     if (val.length >= 8) {\r\n//       setData({\r\n//         ...data,\r\n//         password: val,\r\n//         isValidPassword: true,\r\n//       })\r\n//     } else {\r\n//       setData({\r\n//         ...data,\r\n//         password: val,\r\n//         isValidPassword: false,\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   const handleClose = (event, reason) => {\r\n//     if (reason === 'clickaway') {\r\n//       return;\r\n//     }\r\n\r\n//     setData({ snackbar: false });\r\n//   };\r\n\r\n//   // var point;\r\n\r\n//   var unsubscribeConnectionListener = () => {\r\n//     NetInfo.addEventListener(state => {\r\n//       // if (state.isConnected) {\r\n//       // point == false;\r\n//       // } else {\r\n//       // point == true;\r\n//       return <Snackbar\r\n//         anchorOrigin={{\r\n//           vertical: 'bottom',\r\n//           horizontal: 'left',\r\n//         }}\r\n//         open={state.isConnected === false}\r\n//         autoHideDuration={6000}\r\n//         onClose={handleClose}\r\n//         message=\"Note archived\"\r\n//         action={\r\n//           <React.Fragment>\r\n//             <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n//               Internet error\r\n//               </Button>\r\n//             <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n//               <CloseIcon fontSize=\"small\" />\r\n//             </IconButton>\r\n//           </React.Fragment>\r\n//         }\r\n//       />\r\n//       // }\r\n//       // setData({ snackbar: !state.isConnected });\r\n//     })\r\n//     return point;\r\n//     // setData({ snackbar: point });\r\n//   }\r\n//   return (<>\r\n//     {unsubscribeConnectionListener()}\r\n//     <View style={styles.wrapper}>\r\n//       <View style={styles.container}>\r\n//         <Text style={styles.titleWrapper}>Sign in</Text>\r\n//         <View style={styles.rowContainer}>\r\n//           <View style={styles.contain}>\r\n//             <TextInput\r\n//               type=\"text\"\r\n//               id=\"email\"\r\n//               name=\"email\"\r\n//               placeholder=\"Email\"\r\n//               onChangeText={(text) => validate(text)} />{data.isValidEmail ? null : (<Text style={styles.errorText}>field is required</Text>)}</View></View>\r\n//         <View style={styles.rowContainer}><View style={styles.contain}>\r\n//           <TextInput\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             name=\"password\"\r\n//             placeholder=\"Password\"\r\n//             onChangeText={(val) => handlePasswordChange(val)}\r\n//           />{data.isValidPassword ? null : (<Text style={styles.errorText}>field is required</Text>)}\r\n//         </View>\r\n//         </View>\r\n//         <Text style={styles.errorText}>{data.error}</Text>\r\n//         <View style={styles.buttonWrapper}>\r\n//           <Button onClick={onButtonPress}>Sign In</Button>\r\n//         </View>\r\n//         <View style={styles.lastRow}>\r\n//           <Text style={styles.qa}>Not with us yet?</Text>\r\n//           <Text\r\n//             style={styles.link}\r\n//             onPress={() => { navigation.navigate('SignUp') }}>Sign Up</Text>\r\n//         </View>\r\n//       </View>\r\n//     </View>\r\n//   </>)\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   wrapper: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//     backgroundColor: '#ecf0f1',\r\n//   },\r\n//   container: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     padding: 16,\r\n//     width: 380,\r\n//     height: 400,\r\n//   },\r\n//   titleWrapper: {\r\n//     display: 'flex',\r\n//     fontWeight: 'bold',\r\n//     fontSize: 32,\r\n//     justifyContent: 'center',\r\n//   },\r\n//   rowContainer: {\r\n//     display: 'flex',\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'center',\r\n//     marginTop: 16,\r\n//     borderWidth: 1,\r\n//     borderStyle: 'solid',\r\n//     borderColor: '#ffffff',\r\n//     padding: 16,\r\n//   },\r\n//   buttonWrapper: {\r\n//     display: 'flex',\r\n//     borderWidth: 1,\r\n//     borderStyle: 'solid',\r\n//     // backgroudColor: \"#E9B735\", \r\n//     borderColor: '#1A1E3D',\r\n//     marginTop: 16,\r\n//   },\r\n//   lastRow: {\r\n//     display: 'flex',\r\n//     flexDirection: 'row',\r\n//     justifyContent: 'space-between',\r\n//     padding: 8,\r\n//     marginLeft: 16,\r\n//     marginRight: 48,\r\n//   },\r\n//   qa: {\r\n//     fontSize: 14.4,\r\n//     color: '#1A1E3D',\r\n//   },\r\n//   link: {\r\n//     fontWeight: 'bold',\r\n//     color: '#6BB5C9',\r\n//   },\r\n//   errorText: {\r\n//     fontSize: 11.2,\r\n//     color: '#C7424F',\r\n//     fontWeight: 'bold',\r\n//     width: 128,\r\n//   },\r\n//   contain: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//   },\r\n// })\r\n\r\n// export default SignIn\r\n"]},"metadata":{},"sourceType":"script"}