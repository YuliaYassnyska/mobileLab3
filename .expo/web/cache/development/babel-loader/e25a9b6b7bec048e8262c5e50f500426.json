{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, { useState } from 'react'\r\n// import { View, StyleSheet, Image, SafeAreaView, ScrollView } from 'react-native'\r\n// import firebase from 'firebase'\r\n// import Button from '@material-ui/core/Button';\r\n// import 'firebase/firestore';\r\n// import List from '@material-ui/core/List';\r\n// import ListItem from '@material-ui/core/ListItem';\r\n// import ListItemIcon from '@material-ui/core/ListItemIcon';\r\n// import ListItemText from '@material-ui/core/ListItemText';\r\n// import Divider from '@material-ui/core/Divider';\r\n// import { user } from '../../components/mocks';\r\n// import { Block, Text } from \"../../components\";\r\n// import * as theme from \"../../components/theme\";\r\n// import WbIncandescentIcon from '@material-ui/icons/WbIncandescent';\r\n// import OpacityIcon from '@material-ui/icons/Opacity';\r\n// import LocationOnIcon from '@material-ui/icons/LocationOn';\r\n// import ColorizeIcon from '@material-ui/icons/Colorize';\r\n// import WhatshotIcon from '@material-ui/icons/Whatshot';\r\n// import LinearProgress from '@material-ui/core/LinearProgress';\r\n// import YoutubeSearchedForIcon from '@material-ui/icons/YoutubeSearchedFor';\r\n// import { TextInput } from 'react-native-gesture-handler';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n// import FormControl from '@material-ui/core/FormControl';\r\n// import Select from '@material-ui/core/Select';\r\n// import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\n// import ListItems from '../../components/ListItem';\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n// const SoilSenseT = ({ navigation }) => {\r\n\r\n//     var config = {\r\n//         apiKey: 'AIzaSyBmMQzZDPK8WoRFsXZwEikglgPh8fdbRfU',\r\n//         authDomain: 'moonlit-premise-268014.firebaseapp.com',\r\n//         databaseURL: 'https://project-483449585526.firebaseio.com',\r\n//         projectId: 'moonlit-premise-268014',\r\n//     }\r\n\r\n//     if (!firebase.apps.length) {\r\n//         var app = firebase.initializeApp(config)\r\n//     }\r\n\r\n//     var db = firebase.firestore(app);\r\n\r\n//     var docRef = db.collection(\"soilSense\").doc(\"iAZwp2WZD51dWnkG45d5\");\r\n\r\n//     const [temperatureLevel, setTemperatureLevel] = useState(0);\r\n//     const [waterPump, setWaterPump] = useState('');\r\n//     const [sensorLocation, setSensorLocation] = useState('');\r\n//     const [maxWaterValue, setMaxWaterValue] = useState(0);\r\n//     const [lightingLevel, setLightingLevel] = useState('');\r\n//     const [humidityLevel, setHumidityLevel] = useState(0);\r\n//     const [update, setUpdate] = useState('');\r\n//     const [value, setValue] = useState('');\r\n//     const [newItem, setNewItem] = useState('');\r\n\r\n//     const handleChange = (event) => {\r\n//         setUpdate(event.target.value);\r\n//         if (update === 'Max Water') {\r\n//             getText()\r\n//         }\r\n//     };\r\n\r\n//     const deleteItem = () => {\r\n//         docRef.delete().catch(function (error) {\r\n//             console.log(\"Error getting document:\", error);\r\n//         });\r\n//         navigation.navigate('Sensors')\r\n//     }\r\n\r\n//     const getTemperatureLevel = () => {\r\n//         docRef.get().then(function (doc) {\r\n//             if (doc.exists) {\r\n//                 // console.log(\"Document data:\", doc.data());\r\n//                 setTemperatureLevel(doc.get('temperatureLevel'));\r\n//                 setWaterPump(doc.get('waterPump'));\r\n//                 setSensorLocation(doc.get('sensorLocation'));\r\n//                 setMaxWaterValue(doc.get('maxWaterValue'));\r\n//                 setLightingLevel(doc.get('lightingLevel'));\r\n//                 setHumidityLevel(doc.get('humidityLevel'));\r\n//             } else {\r\n//                 console.log(\"No such document!\");\r\n//             }\r\n//         }).catch(function (error) {\r\n//             console.log(\"Error getting document:\", error);\r\n//         });\r\n//     }\r\n\r\n//     const getText = (text) => {\r\n//         setValue(text);\r\n//     }\r\n\r\n//     // const j = () => {\r\n//     //   console.log(update)\r\n//     // }\r\n//     const UpdateFunc = () => {\r\n//         if (update === 'Max Water') {\r\n//             docRef.update({\r\n//                 maxWaterValue: value\r\n//             })\r\n//                 .catch(function (error) {\r\n//                     console.log(\"Error getting document:\", error);\r\n//                 });\r\n\r\n//             setMaxWaterValue(value)\r\n//         } else if (update === 'Temperature') {\r\n//             docRef.update({\r\n//                 temperatureLevel: value\r\n//             })\r\n//                 .catch(function (error) {\r\n//                     console.log(\"Error getting document:\", error);\r\n//                 });\r\n\r\n//             setTemperatureLevel(value)\r\n//         } else if (update === 'Sensor Location') {\r\n//             docRef.update({\r\n//                 sensorLocation: value\r\n//             })\r\n//                 .catch(function (error) {\r\n//                     console.log(\"Error getting document:\", error);\r\n//                 });\r\n\r\n//             setSensorLocation(value)\r\n//         } else if (update === 'Lighting') {\r\n//             docRef.update({\r\n//                 lightingLevel: value\r\n//             })\r\n//                 .catch(function (error) {\r\n//                     console.log(\"Error getting document:\", error);\r\n//                 });\r\n\r\n//             setLightingLevel(value)\r\n//         } else if (update === 'Humidity') {\r\n//             docRef.update({\r\n//                 humidityLevel: value\r\n//             })\r\n//                 .catch(function (error) {\r\n//                     console.log(\"Error getting document:\", error);\r\n//                 });\r\n\r\n//             setHumidityLevel(value)\r\n//         } else if (update === 'Water Pump') {\r\n//             docRef.update({\r\n//                 waterPump: value\r\n//             })\r\n//                 .catch(function (error) {\r\n//                     console.log(\"Error getting document:\", error);\r\n//                 });\r\n\r\n//             setWaterPump(value)\r\n//         }\r\n//     }\r\n\r\n//     const addText = (text) => {\r\n//         setNewItem(text);\r\n//     }\r\n\r\n//     const add = () => {\r\n//         docRef.set({\r\n//             name: newItem,\r\n//             humidityLevel: humidityLevel,\r\n//             temperatureLevel: temperatureLevel,\r\n//             lightingLevel: lightingLevel,\r\n//             sensorLocation: sensorLocation,\r\n//             waterPump: waterPump,\r\n//             maxWaterValue: maxWaterValue\r\n//         }).catch(function (error) {\r\n//             console.log(\"Error getting document:\", error);\r\n//         });\r\n//     }\r\n\r\n//     const renderRequests = () => {\r\n//         return (\r\n//             <Block flex={0.8} column color=\"gray2\" style={styles.requests}>\r\n//                 <ScrollView showsVerticalScrollIndicator={false}>\r\n//                     <Block card shadow color=\"white\" style={styles.request}>\r\n//                         <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n//                             <ListItem button onClick={() => navigation.navigate('Temperature')}>\r\n//                                 <ListItemIcon>\r\n//                                     <WhatshotIcon />\r\n//                                 </ListItemIcon>\r\n//                                 <ListItemText primary=\"Temperature level\" />\r\n//                                 <ListItemSecondaryAction>\r\n//                                     <ListItemText primary={temperatureLevel} />\r\n//                                 </ListItemSecondaryAction>\r\n//                             </ListItem>\r\n//                             <Divider />\r\n//                             <ListItem button onClick={() => navigation.navigate('MaxWaterValue')}>\r\n//                                 <ListItemIcon>\r\n//                                     <OpacityIcon />\r\n//                                 </ListItemIcon>\r\n//                                 <ListItemText primary=\"Max water value\" />\r\n//                                 <ListItemSecondaryAction>\r\n//                                     <ListItemText primary={maxWaterValue} />\r\n//                                 </ListItemSecondaryAction>\r\n//                             </ListItem>\r\n//                             <Divider />\r\n//                             <ListItem button onClick={() => navigation.navigate('SensorLocation')}>\r\n//                                 <ListItemIcon>\r\n//                                     <LocationOnIcon />\r\n//                                 </ListItemIcon>\r\n//                                 <ListItemText primary=\"Sensor location\" />\r\n//                                 <ListItemSecondaryAction>\r\n//                                     <ListItemText primary={sensorLocation} />\r\n//                                 </ListItemSecondaryAction>\r\n//                             </ListItem>\r\n//                             <Divider />\r\n//                             <ListItem button onClick={() => navigation.navigate('LightingLevel')}>\r\n//                                 <ListItemIcon>\r\n//                                     <WbIncandescentIcon />\r\n//                                 </ListItemIcon>\r\n//                                 <ListItemText primary='Lighting level' />\r\n//                                 <ListItemSecondaryAction>\r\n//                                     <ListItemText primary={lightingLevel} />\r\n//                                 </ListItemSecondaryAction>\r\n//                             </ListItem>\r\n//                             <Divider />\r\n//                             <ListItem button onClick={() => navigation.navigate('HumidityLevel')}>\r\n//                                 <ListItemIcon>\r\n//                                     <ColorizeIcon />\r\n//                                 </ListItemIcon>\r\n//                                 <ListItemText primary=\"Humidity level\" />\r\n//                                 <ListItemSecondaryAction>\r\n//                                     <ListItemText primary={humidityLevel} />\r\n//                                 </ListItemSecondaryAction>\r\n//                             </ListItem>\r\n//                             <Divider />\r\n//                             <ListItem button onClick={() => navigation.navigate('WaterPump')}>\r\n//                                 <ListItemIcon>\r\n//                                     <YoutubeSearchedForIcon />\r\n//                                 </ListItemIcon>\r\n//                                 <ListItemText primary=\"Water pump\" />\r\n//                                 <ListItemSecondaryAction>\r\n//                                     <ListItemText primary={waterPump} />\r\n//                                 </ListItemSecondaryAction>\r\n//                             </ListItem>\r\n//                             {newItem !== '' && <ListItems newItem={newItem} />}\r\n//                         </List>\r\n//                         <Button onClick={deleteItem}><DeleteIcon /></Button>\r\n//                     </Block>\r\n//                     <Block card shadow color=\"white\" style={styles.request}>\r\n//                         <View >\r\n//                             <FormControl style={{ marginBottom: 16 }}>\r\n//                                 <InputLabel id=\"demo-simple-select-label\">Update</InputLabel>\r\n//                                 <Select\r\n//                                     labelId=\"demo-simple-select-label\"\r\n//                                     id=\"demo-simple-select\"\r\n//                                     value={update}\r\n//                                     onChange={(event) => handleChange(event)}\r\n//                                 >\r\n//                                     <MenuItem onClick={() => setUpdate('Temperature')}>Temperature</MenuItem>\r\n//                                     <MenuItem onClick={() => setUpdate('Max Water')}>Max Water</MenuItem>\r\n//                                     <MenuItem onClick={() => setUpdate('Sensor Location')}>Sensor Location</MenuItem>\r\n//                                     <MenuItem onClick={() => setUpdate('Lighting')}>Lighting</MenuItem>\r\n//                                     <MenuItem onClick={() => setUpdate('Humidity')}>Humidity</MenuItem>\r\n//                                     <MenuItem onClick={() => setUpdate('Water Pump')}>Water Pump</MenuItem>\r\n//                                 </Select>\r\n//                             </FormControl>\r\n//                             <View style={{ marginBottom: 16, alignItems: 'center' }}>\r\n//                                 <TextInput onChangeText={(text) => { getText(text) }} style={{ width: 200, padding: 5, height: 32, borderColor: 'black', borderStyle: 'solid', borderWidth: 3 }} />\r\n//                             </View>\r\n//                             <View style={styles.buttonWrapper}><Button onClick={UpdateFunc} color='#1A1E3D'>update</Button></View>\r\n//                         </View>\r\n//                     </Block>\r\n//                     <Block card shadow color=\"white\" style={styles.request} row>\r\n//                         <TextInput onChangeText={(text) => { addText(text) }} style={{ width: 200, padding: 5, height: 32, borderColor: 'black', borderStyle: 'solid', borderWidth: 3, marginRight: 16 }} />\r\n//                         <View style={styles.buttonWrapper}>\r\n//                             <View style={styles.buttonWrapper}><Button style={{ width: 150 }} onClick={() => add}>+</Button></View>\r\n//                         </View>\r\n//                     </Block>\r\n//                 </ScrollView>\r\n//             </Block>\r\n//         );\r\n//     }\r\n\r\n//     return (<>{getTemperatureLevel()}\r\n//         {waterPump === '' ? <LinearProgress /> : (<SafeAreaView style={styles.safe}>\r\n//             <Block flex={0.42} column style={{ paddingHorizontal: 15 }}>\r\n//                 <Block flex={false} row style={{ paddingVertical: 15 }}>\r\n//                     <Block center>\r\n//                         <Text h3 white style={{ marginRight: -(25 + 5) }}>Data from my sensors</Text>\r\n//                     </Block>\r\n//                     <Image style={styles.avatar} source={user.avatar} />\r\n//                 </Block>\r\n//                 <Block card row shadow color=\"white\" style={styles.headerChart}>\r\n//                     <Block row style={{ paddingHorizontal: 30 }}>\r\n//                         <Block flex={false} row center>\r\n//                             <Text h2 row>Data</Text>\r\n//                         </Block>\r\n//                     </Block>\r\n//                     <Button size=\"small\" color=\"primary\" onClick={() => navigation.navigate('Sensors')}>\r\n//                         Go to main page\r\n//             </Button>\r\n//                 </Block>\r\n//             </Block>\r\n//             {renderRequests()}\r\n//         </SafeAreaView>)}</>)\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//     safe: {\r\n//         flex: 1,\r\n//         backgroundColor: theme.colors.primary\r\n//     },\r\n//     request: {\r\n//         padding: 20,\r\n//         marginBottom: 15\r\n//     },\r\n//     formControl: {\r\n//         minWidth: 120,\r\n//     },\r\n//     buttonWrapper: {\r\n//         display: 'flex',\r\n//         borderWidth: 1,\r\n//         borderStyle: 'solid',\r\n//         borderColor: '#1A1E3D',\r\n//     },\r\n//     headerChart: {\r\n//         paddingTop: 30,\r\n//         paddingBottom: 30,\r\n//         zIndex: 1\r\n//     },\r\n//     requests: {\r\n//         marginTop: -55,\r\n//         paddingTop: 55 + 20,\r\n//         paddingHorizontal: 15,\r\n//         zIndex: -1\r\n//     },\r\n//     avatar: {\r\n//         width: 25,\r\n//         height: 25,\r\n//         borderRadius: 25 / 2,\r\n//         marginRight: 5\r\n//     },\r\n// })\r\n\r\n// export default SoilSenseT\r\n"]},"metadata":{},"sourceType":"script"}