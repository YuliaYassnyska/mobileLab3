{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\test\\\\Desktop\\\\rlab1\\\\mobile_lab1\\\\pages\\\\CurrencyFormatting\\\\index.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as theme from \"../../components/theme\";\nimport { Block, Text } from \"../../components\";\nimport Button from '@material-ui/core/Button';\nimport { user } from \"../../components/mocks\";\nimport CurrencyInput from 'react-native-currency-input';\n\nvar CurrencyFormatting = function CurrencyFormatting(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(2310.458),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }\n  }, React.createElement(CurrencyInput, {\n    value: value,\n    onChangeValue: setValue,\n    unit: \"$\",\n    delimiter: \",\",\n    separator: \".\",\n    precision: 2,\n    onChangeText: function onChangeText(formattedValue) {\n      console.log(formattedValue);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  safe: {\n    flex: 1,\n    backgroundColor: theme.colors.primary\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eaac7f'\n  },\n  request: {\n    padding: 20,\n    marginBottom: 15\n  },\n  requests: {\n    marginTop: -55,\n    paddingTop: 55 + 20,\n    paddingHorizontal: 15,\n    zIndex: -1\n  },\n  headerChart: {\n    paddingTop: 30,\n    paddingBottom: 30,\n    zIndex: 1\n  },\n  forCurrency: {\n    paddingTop: 30,\n    paddingBottom: 30,\n    fontWeight: 'bold',\n    fontSize: 32\n  },\n  progress: {\n    alignItems: 'center',\n    width: 50,\n    justifyContent: 'center'\n  },\n  avatar: {\n    width: 25,\n    height: 25,\n    borderRadius: 25 / 2,\n    marginRight: 5\n  }\n});\nexport default CurrencyFormatting;","map":{"version":3,"sources":["C:/Users/test/Desktop/rlab1/mobile_lab1/pages/CurrencyFormatting/index.js"],"names":["React","useState","theme","Block","Text","Button","user","CurrencyInput","CurrencyFormatting","navigation","value","setValue","styles","container","formattedValue","console","log","StyleSheet","create","safe","flex","backgroundColor","colors","primary","justifyContent","alignItems","request","padding","marginBottom","requests","marginTop","paddingTop","paddingHorizontal","zIndex","headerChart","paddingBottom","forCurrency","fontWeight","fontSize","progress","width","avatar","height","borderRadius","marginRight"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;;AAGA,OAAO,KAAKC,KAAZ;AACA,SAASC,KAAT,EAAgBC,IAAhB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,IAAT;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAkDA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,wBACjBT,KAAK,CAACC,QAAN,CAAe,QAAf,CADiB;AAAA;AAAA,MACpCS,KADoC;AAAA,MAC7BC,QAD6B;;AAa3C,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA+CH,oBAAC,aAAD;AACI,IAAA,KAAK,EAAEH,KADX;AAEI,IAAA,aAAa,EAAEC,QAFnB;AAGI,IAAA,IAAI,EAAC,GAHT;AAII,IAAA,SAAS,EAAC,GAJd;AAKI,IAAA,SAAS,EAAC,GALd;AAMI,IAAA,SAAS,EAAE,CANf;AAOI,IAAA,YAAY,EAAE,sBAACG,cAAD,EAAoB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACH,KATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/CG,CAAP;AA2DH,CAxED;;AA2EA,IAAMF,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,CADJ;AAEFC,IAAAA,eAAe,EAAEnB,KAAK,CAACoB,MAAN,CAAaC;AAF5B,GADuB;AAK7BV,EAAAA,SAAS,EAAE;AACPO,IAAAA,IAAI,EAAE,CADC;AAEPI,IAAAA,cAAc,EAAE,QAFT;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPJ,IAAAA,eAAe,EAAE;AAJV,GALkB;AAW7BK,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,YAAY,EAAE;AAFT,GAXoB;AAe7BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAAC,EADN;AAENC,IAAAA,UAAU,EAAE,KAAK,EAFX;AAGNC,IAAAA,iBAAiB,EAAE,EAHb;AAINC,IAAAA,MAAM,EAAE,CAAC;AAJH,GAfmB;AAqB7BC,EAAAA,WAAW,EAAE;AACTH,IAAAA,UAAU,EAAE,EADH;AAETI,IAAAA,aAAa,EAAE,EAFN;AAGTF,IAAAA,MAAM,EAAE;AAHC,GArBgB;AA0B7BG,EAAAA,WAAW,EAAE;AACTL,IAAAA,UAAU,EAAE,EADH;AAETI,IAAAA,aAAa,EAAE,EAFN;AAGTE,IAAAA,UAAU,EAAE,MAHH;AAITC,IAAAA,QAAQ,EAAE;AAJD,GA1BgB;AAgC7BC,EAAAA,QAAQ,EAAE;AACNd,IAAAA,UAAU,EAAE,QADN;AAENe,IAAAA,KAAK,EAAE,EAFD;AAGNhB,IAAAA,cAAc,EAAE;AAHV,GAhCmB;AAqC7BiB,EAAAA,MAAM,EAAE;AACJD,IAAAA,KAAK,EAAE,EADH;AAEJE,IAAAA,MAAM,EAAE,EAFJ;AAGJC,IAAAA,YAAY,EAAE,KAAK,CAHf;AAIJC,IAAAA,WAAW,EAAE;AAJT;AArCqB,CAAlB,CAAf;AA6CA,eAAepC,kBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, Image, SafeAreaView, TouchableOpacity, ScrollView, TextInput } from 'react-native';\r\n// import LinearProgress from '@material-ui/core/LinearProgress';\r\nimport * as theme from \"../../components/theme\";\r\nimport { Block, Text } from \"../../components\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { user } from '../../components/mocks';\r\nimport CurrencyInput from 'react-native-currency-input';\r\n\r\n// import PropTypes from 'prop-types'\r\n// import MaskedInput from 'react-text-mask'\r\n// import createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\n\r\n// const defaultMaskOptions = {\r\n//     prefix: '$',\r\n//     suffix: '',\r\n//     includeThousandsSeparator: true,\r\n//     thousandsSeparatorSymbol: ',',\r\n//     allowDecimal: true,\r\n//     decimalSymbol: '.',\r\n//     decimalLimit: 2, // how many digits allowed after the decimal\r\n//     integerLimit: 9, // limit length of integer numbers\r\n//     allowNegative: false,\r\n//     allowLeadingZeroes: false,\r\n// }\r\n\r\n// const CurrencyInput = ({ maskOptions, ...inputProps }) => {\r\n//     const currencyMask = createNumberMask({\r\n//         ...defaultMaskOptions,\r\n//         ...maskOptions,\r\n//     })\r\n//     return <MaskedInput mask={currencyMask} {...inputProps} />\r\n// }\r\n\r\n// CurrencyInput.defaultProps = {\r\n//     inputMode: 'numeric',\r\n//     maskOptions: {},\r\n// }\r\n\r\n// CurrencyInput.propTypes = {\r\n//     inputmode: PropTypes.string,\r\n//     maskOptions: PropTypes.shape({\r\n//         prefix: PropTypes.string,\r\n//         suffix: PropTypes.string,\r\n//         includeThousandsSeparator: PropTypes.boolean,\r\n//         thousandsSeparatorSymbol: PropTypes.string,\r\n//         allowDecimal: PropTypes.boolean,\r\n//         decimalSymbol: PropTypes.string,\r\n//         decimalLimit: PropTypes.string,\r\n//         requireDecimal: PropTypes.boolean,\r\n//         allowNegative: PropTypes.boolean,\r\n//         allowLeadingZeroes: PropTypes.boolean,\r\n//         integerLimit: PropTypes.number,\r\n//     }),\r\n// }\r\n\r\nconst CurrencyFormatting = ({ navigation }) => {\r\n    const [value, setValue] = React.useState(2310.458);\r\n    // const [formated, setFormated] = useState('');\r\n\r\n    // const validate = (currency) => {\r\n    //     const formatter = new Intl.NumberFormat('en-US', {\r\n    //         style: 'currency',\r\n    //         currency: 'USD',\r\n    //         minimumFractionDigits: 2\r\n    //     })\r\n    //     setFormated(formatter.format(currency));\r\n    // }\r\n\r\n    return <View style={styles.container}>\r\n        {/* <SafeAreaView style={styles.safe}> */}\r\n        {/* <Block flex={0.42} column style={{ paddingHorizontal: 15 }}>\r\n                <Block flex={false} row style={{ paddingVertical: 15 }}>\r\n                    <Block center>\r\n                        <Text h3 white style={{ marginRight: -(25 + 5) }}>Currency Formatting</Text>\r\n                    </Block>\r\n                    <Image style={styles.avatar} source={user.avatar} />\r\n                </Block>\r\n                <Block row card shadow color=\"white\" style={styles.headerChart}>\r\n                    <Block style={{ paddingHorizontal: 30 }}>\r\n                        <Block flex={false} row center>\r\n                            <Text h2>Auto Formatting Currency</Text>\r\n                        </Block>\r\n                    </Block> */}\r\n        {/* <Button size=\"small\" color=\"primary\" onClick={() => navigation.navigate('Sensors')}>Go to main page</Button> */}\r\n        {/* </Block>\r\n            </Block>\r\n            <Block flex={0.8} column color=\"gray2\" style={styles.requests}>\r\n                <ScrollView showsVerticalScrollIndicator={false}>\r\n                    <Block card shadow color=\"white\" style={styles.request}> */}\r\n        {/* <TextInput\r\n                            type=\"text\"\r\n                            name=\"currency-field\"\r\n                            id=\"currency-field\"\r\n                            data-type=\"currency\"\r\n                            placeholder=\"$1,000,000.00\"\r\n                            value={formated}\r\n                            editable={true}\r\n                            onChangeText={(currency) => validate(currency)}\r\n\r\n                        /> */}\r\n        {/* <CurrencyInput placeholder=\"$0.00\" type=\"text\" style={{ width: 150, height: 48 }} /> */}\r\n        {/* <Text style={styles.forCurrency}>h</Text> */}\r\n        {/* <CurrencyInput\r\n                            id=\"input-example\"\r\n                            name=\"input-name\"\r\n                            placeholder=\"Please enter a number\"\r\n                            decimalSeparator=\".\"\r\n                            groupSeparator=\",\"\r\n                            decimalsLimit={2}\r\n                            onValueChange={(value, name) => console.log(value, name)}\r\n                        />\r\n                    </Block>\r\n                </ScrollView>\r\n            </Block>\r\n        </SafeAreaView> */}\r\n        <CurrencyInput\r\n            value={value}\r\n            onChangeValue={setValue}\r\n            unit=\"$\"\r\n            delimiter=\",\"\r\n            separator=\".\"\r\n            precision={2}\r\n            onChangeText={(formattedValue) => {\r\n                console.log(formattedValue); // $2,310.46\r\n            }}\r\n        />\r\n    </View>\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    safe: {\r\n        flex: 1,\r\n        backgroundColor: theme.colors.primary\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#eaac7f'\r\n    },\r\n    request: {\r\n        padding: 20,\r\n        marginBottom: 15\r\n    },\r\n    requests: {\r\n        marginTop: -55,\r\n        paddingTop: 55 + 20,\r\n        paddingHorizontal: 15,\r\n        zIndex: -1\r\n    },\r\n    headerChart: {\r\n        paddingTop: 30,\r\n        paddingBottom: 30,\r\n        zIndex: 1,\r\n    },\r\n    forCurrency: {\r\n        paddingTop: 30,\r\n        paddingBottom: 30,\r\n        fontWeight: 'bold',\r\n        fontSize: 32\r\n    },\r\n    progress: {\r\n        alignItems: 'center',\r\n        width: 50,\r\n        justifyContent: 'center',\r\n    },\r\n    avatar: {\r\n        width: 25,\r\n        height: 25,\r\n        borderRadius: 25 / 2,\r\n        marginRight: 5\r\n    },\r\n})\r\n\r\nexport default CurrencyFormatting"]},"metadata":{},"sourceType":"module"}